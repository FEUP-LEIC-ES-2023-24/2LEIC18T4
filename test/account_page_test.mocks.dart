// Mocks generated by Mockito 5.4.4 from annotations
// in study_at/test/account_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:firebase_auth/firebase_auth.dart' as _i4;
import 'package:firebase_auth_platform_interface/firebase_auth_platform_interface.dart'
    as _i3;
import 'package:firebase_core/firebase_core.dart' as _i2;
import 'package:firebase_database/firebase_database.dart' as _i5;
import 'package:firebase_database_platform_interface/firebase_database_platform_interface.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseApp_0 extends _i1.SmartFake implements _i2.FirebaseApp {
  _FakeFirebaseApp_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeActionCodeInfo_1 extends _i1.SmartFake
    implements _i3.ActionCodeInfo {
  _FakeActionCodeInfo_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserCredential_2 extends _i1.SmartFake
    implements _i4.UserCredential {
  _FakeUserCredential_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConfirmationResult_3 extends _i1.SmartFake
    implements _i4.ConfirmationResult {
  _FakeConfirmationResult_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseReference_4 extends _i1.SmartFake
    implements _i5.DatabaseReference {
  _FakeDatabaseReference_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransactionResult_5 extends _i1.SmartFake
    implements _i5.TransactionResult {
  _FakeTransactionResult_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOnDisconnect_6 extends _i1.SmartFake implements _i5.OnDisconnect {
  _FakeOnDisconnect_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDataSnapshot_7 extends _i1.SmartFake implements _i5.DataSnapshot {
  _FakeDataSnapshot_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseEvent_8 extends _i1.SmartFake implements _i5.DatabaseEvent {
  _FakeDatabaseEvent_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuery_9 extends _i1.SmartFake implements _i5.Query {
  _FakeQuery_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamSubscription_10<T> extends _i1.SmartFake
    implements _i6.StreamSubscription<T> {
  _FakeStreamSubscription_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_11<T> extends _i1.SmartFake implements _i6.Future<T> {
  _FakeFuture_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FirebaseAuth].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuth extends _i1.Mock implements _i4.FirebaseAuth {
  @override
  _i2.FirebaseApp get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeFirebaseApp_0(
          this,
          Invocation.getter(#app),
        ),
        returnValueForMissingStub: _FakeFirebaseApp_0(
          this,
          Invocation.getter(#app),
        ),
      ) as _i2.FirebaseApp);

  @override
  set app(_i2.FirebaseApp? _app) => super.noSuchMethod(
        Invocation.setter(
          #app,
          _app,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set tenantId(String? tenantId) => super.noSuchMethod(
        Invocation.setter(
          #tenantId,
          tenantId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<dynamic, dynamic> get pluginConstants => (super.noSuchMethod(
        Invocation.getter(#pluginConstants),
        returnValue: <dynamic, dynamic>{},
        returnValueForMissingStub: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);

  @override
  _i6.Future<void> useEmulator(String? origin) => (super.noSuchMethod(
        Invocation.method(
          #useEmulator,
          [origin],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> useAuthEmulator(
    String? host,
    int? port, {
    bool? automaticHostMapping = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #useAuthEmulator,
          [
            host,
            port,
          ],
          {#automaticHostMapping: automaticHostMapping},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> applyActionCode(String? code) => (super.noSuchMethod(
        Invocation.method(
          #applyActionCode,
          [code],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i3.ActionCodeInfo> checkActionCode(String? code) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkActionCode,
          [code],
        ),
        returnValue: _i6.Future<_i3.ActionCodeInfo>.value(_FakeActionCodeInfo_1(
          this,
          Invocation.method(
            #checkActionCode,
            [code],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.ActionCodeInfo>.value(_FakeActionCodeInfo_1(
          this,
          Invocation.method(
            #checkActionCode,
            [code],
          ),
        )),
      ) as _i6.Future<_i3.ActionCodeInfo>);

  @override
  _i6.Future<void> confirmPasswordReset({
    required String? code,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #confirmPasswordReset,
          [],
          {
            #code: code,
            #newPassword: newPassword,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i4.UserCredential> createUserWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUserWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i6.Future<_i4.UserCredential>.value(_FakeUserCredential_2(
          this,
          Invocation.method(
            #createUserWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.UserCredential>.value(_FakeUserCredential_2(
          this,
          Invocation.method(
            #createUserWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i6.Future<_i4.UserCredential>);

  @override
  _i6.Future<List<String>> fetchSignInMethodsForEmail(String? email) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchSignInMethodsForEmail,
          [email],
        ),
        returnValue: _i6.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i6.Future<List<String>>.value(<String>[]),
      ) as _i6.Future<List<String>>);

  @override
  _i6.Future<_i4.UserCredential> getRedirectResult() => (super.noSuchMethod(
        Invocation.method(
          #getRedirectResult,
          [],
        ),
        returnValue: _i6.Future<_i4.UserCredential>.value(_FakeUserCredential_2(
          this,
          Invocation.method(
            #getRedirectResult,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.UserCredential>.value(_FakeUserCredential_2(
          this,
          Invocation.method(
            #getRedirectResult,
            [],
          ),
        )),
      ) as _i6.Future<_i4.UserCredential>);

  @override
  bool isSignInWithEmailLink(String? emailLink) => (super.noSuchMethod(
        Invocation.method(
          #isSignInWithEmailLink,
          [emailLink],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i6.Stream<_i4.User?> authStateChanges() => (super.noSuchMethod(
        Invocation.method(
          #authStateChanges,
          [],
        ),
        returnValue: _i6.Stream<_i4.User?>.empty(),
        returnValueForMissingStub: _i6.Stream<_i4.User?>.empty(),
      ) as _i6.Stream<_i4.User?>);

  @override
  _i6.Stream<_i4.User?> idTokenChanges() => (super.noSuchMethod(
        Invocation.method(
          #idTokenChanges,
          [],
        ),
        returnValue: _i6.Stream<_i4.User?>.empty(),
        returnValueForMissingStub: _i6.Stream<_i4.User?>.empty(),
      ) as _i6.Stream<_i4.User?>);

  @override
  _i6.Stream<_i4.User?> userChanges() => (super.noSuchMethod(
        Invocation.method(
          #userChanges,
          [],
        ),
        returnValue: _i6.Stream<_i4.User?>.empty(),
        returnValueForMissingStub: _i6.Stream<_i4.User?>.empty(),
      ) as _i6.Stream<_i4.User?>);

  @override
  _i6.Future<void> sendPasswordResetEmail({
    required String? email,
    _i3.ActionCodeSettings? actionCodeSettings,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendPasswordResetEmail,
          [],
          {
            #email: email,
            #actionCodeSettings: actionCodeSettings,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> sendSignInLinkToEmail({
    required String? email,
    required _i3.ActionCodeSettings? actionCodeSettings,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendSignInLinkToEmail,
          [],
          {
            #email: email,
            #actionCodeSettings: actionCodeSettings,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> setLanguageCode(String? languageCode) => (super.noSuchMethod(
        Invocation.method(
          #setLanguageCode,
          [languageCode],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> setSettings({
    bool? appVerificationDisabledForTesting = false,
    String? userAccessGroup,
    String? phoneNumber,
    String? smsCode,
    bool? forceRecaptchaFlow,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSettings,
          [],
          {
            #appVerificationDisabledForTesting:
                appVerificationDisabledForTesting,
            #userAccessGroup: userAccessGroup,
            #phoneNumber: phoneNumber,
            #smsCode: smsCode,
            #forceRecaptchaFlow: forceRecaptchaFlow,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> setPersistence(_i3.Persistence? persistence) =>
      (super.noSuchMethod(
        Invocation.method(
          #setPersistence,
          [persistence],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i4.UserCredential> signInAnonymously() => (super.noSuchMethod(
        Invocation.method(
          #signInAnonymously,
          [],
        ),
        returnValue: _i6.Future<_i4.UserCredential>.value(_FakeUserCredential_2(
          this,
          Invocation.method(
            #signInAnonymously,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.UserCredential>.value(_FakeUserCredential_2(
          this,
          Invocation.method(
            #signInAnonymously,
            [],
          ),
        )),
      ) as _i6.Future<_i4.UserCredential>);

  @override
  _i6.Future<_i4.UserCredential> signInWithCredential(
          _i3.AuthCredential? credential) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithCredential,
          [credential],
        ),
        returnValue: _i6.Future<_i4.UserCredential>.value(_FakeUserCredential_2(
          this,
          Invocation.method(
            #signInWithCredential,
            [credential],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.UserCredential>.value(_FakeUserCredential_2(
          this,
          Invocation.method(
            #signInWithCredential,
            [credential],
          ),
        )),
      ) as _i6.Future<_i4.UserCredential>);

  @override
  _i6.Future<_i4.UserCredential> signInWithCustomToken(String? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithCustomToken,
          [token],
        ),
        returnValue: _i6.Future<_i4.UserCredential>.value(_FakeUserCredential_2(
          this,
          Invocation.method(
            #signInWithCustomToken,
            [token],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.UserCredential>.value(_FakeUserCredential_2(
          this,
          Invocation.method(
            #signInWithCustomToken,
            [token],
          ),
        )),
      ) as _i6.Future<_i4.UserCredential>);

  @override
  _i6.Future<_i4.UserCredential> signInWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i6.Future<_i4.UserCredential>.value(_FakeUserCredential_2(
          this,
          Invocation.method(
            #signInWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.UserCredential>.value(_FakeUserCredential_2(
          this,
          Invocation.method(
            #signInWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i6.Future<_i4.UserCredential>);

  @override
  _i6.Future<_i4.UserCredential> signInWithEmailLink({
    required String? email,
    required String? emailLink,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmailLink,
          [],
          {
            #email: email,
            #emailLink: emailLink,
          },
        ),
        returnValue: _i6.Future<_i4.UserCredential>.value(_FakeUserCredential_2(
          this,
          Invocation.method(
            #signInWithEmailLink,
            [],
            {
              #email: email,
              #emailLink: emailLink,
            },
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.UserCredential>.value(_FakeUserCredential_2(
          this,
          Invocation.method(
            #signInWithEmailLink,
            [],
            {
              #email: email,
              #emailLink: emailLink,
            },
          ),
        )),
      ) as _i6.Future<_i4.UserCredential>);

  @override
  _i6.Future<_i4.UserCredential> signInWithAuthProvider(
          _i3.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithAuthProvider,
          [provider],
        ),
        returnValue: _i6.Future<_i4.UserCredential>.value(_FakeUserCredential_2(
          this,
          Invocation.method(
            #signInWithAuthProvider,
            [provider],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.UserCredential>.value(_FakeUserCredential_2(
          this,
          Invocation.method(
            #signInWithAuthProvider,
            [provider],
          ),
        )),
      ) as _i6.Future<_i4.UserCredential>);

  @override
  _i6.Future<_i4.UserCredential> signInWithProvider(
          _i3.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithProvider,
          [provider],
        ),
        returnValue: _i6.Future<_i4.UserCredential>.value(_FakeUserCredential_2(
          this,
          Invocation.method(
            #signInWithProvider,
            [provider],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.UserCredential>.value(_FakeUserCredential_2(
          this,
          Invocation.method(
            #signInWithProvider,
            [provider],
          ),
        )),
      ) as _i6.Future<_i4.UserCredential>);

  @override
  _i6.Future<_i4.ConfirmationResult> signInWithPhoneNumber(
    String? phoneNumber, [
    _i4.RecaptchaVerifier? verifier,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithPhoneNumber,
          [
            phoneNumber,
            verifier,
          ],
        ),
        returnValue:
            _i6.Future<_i4.ConfirmationResult>.value(_FakeConfirmationResult_3(
          this,
          Invocation.method(
            #signInWithPhoneNumber,
            [
              phoneNumber,
              verifier,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.ConfirmationResult>.value(_FakeConfirmationResult_3(
          this,
          Invocation.method(
            #signInWithPhoneNumber,
            [
              phoneNumber,
              verifier,
            ],
          ),
        )),
      ) as _i6.Future<_i4.ConfirmationResult>);

  @override
  _i6.Future<_i4.UserCredential> signInWithPopup(_i3.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithPopup,
          [provider],
        ),
        returnValue: _i6.Future<_i4.UserCredential>.value(_FakeUserCredential_2(
          this,
          Invocation.method(
            #signInWithPopup,
            [provider],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.UserCredential>.value(_FakeUserCredential_2(
          this,
          Invocation.method(
            #signInWithPopup,
            [provider],
          ),
        )),
      ) as _i6.Future<_i4.UserCredential>);

  @override
  _i6.Future<void> signInWithRedirect(_i3.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithRedirect,
          [provider],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<String> verifyPasswordResetCode(String? code) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyPasswordResetCode,
          [code],
        ),
        returnValue: _i6.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #verifyPasswordResetCode,
            [code],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #verifyPasswordResetCode,
            [code],
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<void> verifyPhoneNumber({
    String? phoneNumber,
    _i3.PhoneMultiFactorInfo? multiFactorInfo,
    required _i3.PhoneVerificationCompleted? verificationCompleted,
    required _i3.PhoneVerificationFailed? verificationFailed,
    required _i3.PhoneCodeSent? codeSent,
    required _i3.PhoneCodeAutoRetrievalTimeout? codeAutoRetrievalTimeout,
    String? autoRetrievedSmsCodeForTesting,
    Duration? timeout = const Duration(seconds: 30),
    int? forceResendingToken,
    _i3.MultiFactorSession? multiFactorSession,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyPhoneNumber,
          [],
          {
            #phoneNumber: phoneNumber,
            #multiFactorInfo: multiFactorInfo,
            #verificationCompleted: verificationCompleted,
            #verificationFailed: verificationFailed,
            #codeSent: codeSent,
            #codeAutoRetrievalTimeout: codeAutoRetrievalTimeout,
            #autoRetrievedSmsCodeForTesting: autoRetrievedSmsCodeForTesting,
            #timeout: timeout,
            #forceResendingToken: forceResendingToken,
            #multiFactorSession: multiFactorSession,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> revokeTokenWithAuthorizationCode(
          String? authorizationCode) =>
      (super.noSuchMethod(
        Invocation.method(
          #revokeTokenWithAuthorizationCode,
          [authorizationCode],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [DatabaseReference].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseReference extends _i1.Mock implements _i5.DatabaseReference {
  @override
  _i5.DatabaseReference get root => (super.noSuchMethod(
        Invocation.getter(#root),
        returnValue: _FakeDatabaseReference_4(
          this,
          Invocation.getter(#root),
        ),
        returnValueForMissingStub: _FakeDatabaseReference_4(
          this,
          Invocation.getter(#root),
        ),
      ) as _i5.DatabaseReference);

  @override
  _i5.DatabaseReference get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeDatabaseReference_4(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub: _FakeDatabaseReference_4(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i5.DatabaseReference);

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  _i6.Stream<_i5.DatabaseEvent> get onChildAdded => (super.noSuchMethod(
        Invocation.getter(#onChildAdded),
        returnValue: _i6.Stream<_i5.DatabaseEvent>.empty(),
        returnValueForMissingStub: _i6.Stream<_i5.DatabaseEvent>.empty(),
      ) as _i6.Stream<_i5.DatabaseEvent>);

  @override
  _i6.Stream<_i5.DatabaseEvent> get onChildRemoved => (super.noSuchMethod(
        Invocation.getter(#onChildRemoved),
        returnValue: _i6.Stream<_i5.DatabaseEvent>.empty(),
        returnValueForMissingStub: _i6.Stream<_i5.DatabaseEvent>.empty(),
      ) as _i6.Stream<_i5.DatabaseEvent>);

  @override
  _i6.Stream<_i5.DatabaseEvent> get onChildChanged => (super.noSuchMethod(
        Invocation.getter(#onChildChanged),
        returnValue: _i6.Stream<_i5.DatabaseEvent>.empty(),
        returnValueForMissingStub: _i6.Stream<_i5.DatabaseEvent>.empty(),
      ) as _i6.Stream<_i5.DatabaseEvent>);

  @override
  _i6.Stream<_i5.DatabaseEvent> get onChildMoved => (super.noSuchMethod(
        Invocation.getter(#onChildMoved),
        returnValue: _i6.Stream<_i5.DatabaseEvent>.empty(),
        returnValueForMissingStub: _i6.Stream<_i5.DatabaseEvent>.empty(),
      ) as _i6.Stream<_i5.DatabaseEvent>);

  @override
  _i6.Stream<_i5.DatabaseEvent> get onValue => (super.noSuchMethod(
        Invocation.getter(#onValue),
        returnValue: _i6.Stream<_i5.DatabaseEvent>.empty(),
        returnValueForMissingStub: _i6.Stream<_i5.DatabaseEvent>.empty(),
      ) as _i6.Stream<_i5.DatabaseEvent>);

  @override
  _i5.DatabaseReference child(String? path) => (super.noSuchMethod(
        Invocation.method(
          #child,
          [path],
        ),
        returnValue: _FakeDatabaseReference_4(
          this,
          Invocation.method(
            #child,
            [path],
          ),
        ),
        returnValueForMissingStub: _FakeDatabaseReference_4(
          this,
          Invocation.method(
            #child,
            [path],
          ),
        ),
      ) as _i5.DatabaseReference);

  @override
  _i5.DatabaseReference push() => (super.noSuchMethod(
        Invocation.method(
          #push,
          [],
        ),
        returnValue: _FakeDatabaseReference_4(
          this,
          Invocation.method(
            #push,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeDatabaseReference_4(
          this,
          Invocation.method(
            #push,
            [],
          ),
        ),
      ) as _i5.DatabaseReference);

  @override
  _i6.Future<void> set(Object? value) => (super.noSuchMethod(
        Invocation.method(
          #set,
          [value],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> setWithPriority(
    Object? value,
    Object? priority,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setWithPriority,
          [
            value,
            priority,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> update(Map<String, Object?>? value) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [value],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> setPriority(Object? priority) => (super.noSuchMethod(
        Invocation.method(
          #setPriority,
          [priority],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> remove() => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i5.TransactionResult> runTransaction(
    _i8.TransactionHandler? transactionHandler, {
    bool? applyLocally = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runTransaction,
          [transactionHandler],
          {#applyLocally: applyLocally},
        ),
        returnValue:
            _i6.Future<_i5.TransactionResult>.value(_FakeTransactionResult_5(
          this,
          Invocation.method(
            #runTransaction,
            [transactionHandler],
            {#applyLocally: applyLocally},
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i5.TransactionResult>.value(_FakeTransactionResult_5(
          this,
          Invocation.method(
            #runTransaction,
            [transactionHandler],
            {#applyLocally: applyLocally},
          ),
        )),
      ) as _i6.Future<_i5.TransactionResult>);

  @override
  _i5.OnDisconnect onDisconnect() => (super.noSuchMethod(
        Invocation.method(
          #onDisconnect,
          [],
        ),
        returnValue: _FakeOnDisconnect_6(
          this,
          Invocation.method(
            #onDisconnect,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeOnDisconnect_6(
          this,
          Invocation.method(
            #onDisconnect,
            [],
          ),
        ),
      ) as _i5.OnDisconnect);

  @override
  _i6.Future<_i5.DataSnapshot> get() => (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
        ),
        returnValue: _i6.Future<_i5.DataSnapshot>.value(_FakeDataSnapshot_7(
          this,
          Invocation.method(
            #get,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i5.DataSnapshot>.value(_FakeDataSnapshot_7(
          this,
          Invocation.method(
            #get,
            [],
          ),
        )),
      ) as _i6.Future<_i5.DataSnapshot>);

  @override
  _i6.Future<_i5.DatabaseEvent> once(
          [_i8.DatabaseEventType? eventType = _i8.DatabaseEventType.value]) =>
      (super.noSuchMethod(
        Invocation.method(
          #once,
          [eventType],
        ),
        returnValue: _i6.Future<_i5.DatabaseEvent>.value(_FakeDatabaseEvent_8(
          this,
          Invocation.method(
            #once,
            [eventType],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i5.DatabaseEvent>.value(_FakeDatabaseEvent_8(
          this,
          Invocation.method(
            #once,
            [eventType],
          ),
        )),
      ) as _i6.Future<_i5.DatabaseEvent>);

  @override
  _i5.Query startAt(
    Object? value, {
    String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAt,
          [value],
          {#key: key},
        ),
        returnValue: _FakeQuery_9(
          this,
          Invocation.method(
            #startAt,
            [value],
            {#key: key},
          ),
        ),
        returnValueForMissingStub: _FakeQuery_9(
          this,
          Invocation.method(
            #startAt,
            [value],
            {#key: key},
          ),
        ),
      ) as _i5.Query);

  @override
  _i5.Query startAfter(
    Object? value, {
    String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAfter,
          [value],
          {#key: key},
        ),
        returnValue: _FakeQuery_9(
          this,
          Invocation.method(
            #startAfter,
            [value],
            {#key: key},
          ),
        ),
        returnValueForMissingStub: _FakeQuery_9(
          this,
          Invocation.method(
            #startAfter,
            [value],
            {#key: key},
          ),
        ),
      ) as _i5.Query);

  @override
  _i5.Query endAt(
    Object? value, {
    String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #endAt,
          [value],
          {#key: key},
        ),
        returnValue: _FakeQuery_9(
          this,
          Invocation.method(
            #endAt,
            [value],
            {#key: key},
          ),
        ),
        returnValueForMissingStub: _FakeQuery_9(
          this,
          Invocation.method(
            #endAt,
            [value],
            {#key: key},
          ),
        ),
      ) as _i5.Query);

  @override
  _i5.Query endBefore(
    Object? value, {
    String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #endBefore,
          [value],
          {#key: key},
        ),
        returnValue: _FakeQuery_9(
          this,
          Invocation.method(
            #endBefore,
            [value],
            {#key: key},
          ),
        ),
        returnValueForMissingStub: _FakeQuery_9(
          this,
          Invocation.method(
            #endBefore,
            [value],
            {#key: key},
          ),
        ),
      ) as _i5.Query);

  @override
  _i5.Query equalTo(
    Object? value, {
    String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #equalTo,
          [value],
          {#key: key},
        ),
        returnValue: _FakeQuery_9(
          this,
          Invocation.method(
            #equalTo,
            [value],
            {#key: key},
          ),
        ),
        returnValueForMissingStub: _FakeQuery_9(
          this,
          Invocation.method(
            #equalTo,
            [value],
            {#key: key},
          ),
        ),
      ) as _i5.Query);

  @override
  _i5.Query limitToFirst(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #limitToFirst,
          [limit],
        ),
        returnValue: _FakeQuery_9(
          this,
          Invocation.method(
            #limitToFirst,
            [limit],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_9(
          this,
          Invocation.method(
            #limitToFirst,
            [limit],
          ),
        ),
      ) as _i5.Query);

  @override
  _i5.Query limitToLast(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #limitToLast,
          [limit],
        ),
        returnValue: _FakeQuery_9(
          this,
          Invocation.method(
            #limitToLast,
            [limit],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_9(
          this,
          Invocation.method(
            #limitToLast,
            [limit],
          ),
        ),
      ) as _i5.Query);

  @override
  _i5.Query orderByChild(String? path) => (super.noSuchMethod(
        Invocation.method(
          #orderByChild,
          [path],
        ),
        returnValue: _FakeQuery_9(
          this,
          Invocation.method(
            #orderByChild,
            [path],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_9(
          this,
          Invocation.method(
            #orderByChild,
            [path],
          ),
        ),
      ) as _i5.Query);

  @override
  _i5.Query orderByKey() => (super.noSuchMethod(
        Invocation.method(
          #orderByKey,
          [],
        ),
        returnValue: _FakeQuery_9(
          this,
          Invocation.method(
            #orderByKey,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_9(
          this,
          Invocation.method(
            #orderByKey,
            [],
          ),
        ),
      ) as _i5.Query);

  @override
  _i5.Query orderByValue() => (super.noSuchMethod(
        Invocation.method(
          #orderByValue,
          [],
        ),
        returnValue: _FakeQuery_9(
          this,
          Invocation.method(
            #orderByValue,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_9(
          this,
          Invocation.method(
            #orderByValue,
            [],
          ),
        ),
      ) as _i5.Query);

  @override
  _i5.Query orderByPriority() => (super.noSuchMethod(
        Invocation.method(
          #orderByPriority,
          [],
        ),
        returnValue: _FakeQuery_9(
          this,
          Invocation.method(
            #orderByPriority,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_9(
          this,
          Invocation.method(
            #orderByPriority,
            [],
          ),
        ),
      ) as _i5.Query);

  @override
  _i6.Future<void> keepSynced(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #keepSynced,
          [value],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [Stream].
///
/// See the documentation for Mockito's code generation for more information.
class MockStream extends _i1.Mock implements _i6.Stream<_i5.DatabaseEvent> {
  @override
  bool get isBroadcast => (super.noSuchMethod(
        Invocation.getter(#isBroadcast),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i6.Future<int> get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: _i6.Future<int>.value(0),
        returnValueForMissingStub: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<bool> get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<_i5.DatabaseEvent> get first => (super.noSuchMethod(
        Invocation.getter(#first),
        returnValue: _i6.Future<_i5.DatabaseEvent>.value(_FakeDatabaseEvent_8(
          this,
          Invocation.getter(#first),
        )),
        returnValueForMissingStub:
            _i6.Future<_i5.DatabaseEvent>.value(_FakeDatabaseEvent_8(
          this,
          Invocation.getter(#first),
        )),
      ) as _i6.Future<_i5.DatabaseEvent>);

  @override
  _i6.Future<_i5.DatabaseEvent> get last => (super.noSuchMethod(
        Invocation.getter(#last),
        returnValue: _i6.Future<_i5.DatabaseEvent>.value(_FakeDatabaseEvent_8(
          this,
          Invocation.getter(#last),
        )),
        returnValueForMissingStub:
            _i6.Future<_i5.DatabaseEvent>.value(_FakeDatabaseEvent_8(
          this,
          Invocation.getter(#last),
        )),
      ) as _i6.Future<_i5.DatabaseEvent>);

  @override
  _i6.Future<_i5.DatabaseEvent> get single => (super.noSuchMethod(
        Invocation.getter(#single),
        returnValue: _i6.Future<_i5.DatabaseEvent>.value(_FakeDatabaseEvent_8(
          this,
          Invocation.getter(#single),
        )),
        returnValueForMissingStub:
            _i6.Future<_i5.DatabaseEvent>.value(_FakeDatabaseEvent_8(
          this,
          Invocation.getter(#single),
        )),
      ) as _i6.Future<_i5.DatabaseEvent>);

  @override
  _i6.Stream<_i5.DatabaseEvent> asBroadcastStream({
    void Function(_i6.StreamSubscription<_i5.DatabaseEvent>)? onListen,
    void Function(_i6.StreamSubscription<_i5.DatabaseEvent>)? onCancel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #asBroadcastStream,
          [],
          {
            #onListen: onListen,
            #onCancel: onCancel,
          },
        ),
        returnValue: _i6.Stream<_i5.DatabaseEvent>.empty(),
        returnValueForMissingStub: _i6.Stream<_i5.DatabaseEvent>.empty(),
      ) as _i6.Stream<_i5.DatabaseEvent>);

  @override
  _i6.StreamSubscription<_i5.DatabaseEvent> listen(
    void Function(_i5.DatabaseEvent)? onData, {
    Function? onError,
    void Function()? onDone,
    bool? cancelOnError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [onData],
          {
            #onError: onError,
            #onDone: onDone,
            #cancelOnError: cancelOnError,
          },
        ),
        returnValue: _FakeStreamSubscription_10<_i5.DatabaseEvent>(
          this,
          Invocation.method(
            #listen,
            [onData],
            {
              #onError: onError,
              #onDone: onDone,
              #cancelOnError: cancelOnError,
            },
          ),
        ),
        returnValueForMissingStub:
            _FakeStreamSubscription_10<_i5.DatabaseEvent>(
          this,
          Invocation.method(
            #listen,
            [onData],
            {
              #onError: onError,
              #onDone: onDone,
              #cancelOnError: cancelOnError,
            },
          ),
        ),
      ) as _i6.StreamSubscription<_i5.DatabaseEvent>);

  @override
  _i6.Stream<_i5.DatabaseEvent> where(bool Function(_i5.DatabaseEvent)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [test],
        ),
        returnValue: _i6.Stream<_i5.DatabaseEvent>.empty(),
        returnValueForMissingStub: _i6.Stream<_i5.DatabaseEvent>.empty(),
      ) as _i6.Stream<_i5.DatabaseEvent>);

  @override
  _i6.Stream<S> map<S>(S Function(_i5.DatabaseEvent)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #map,
          [convert],
        ),
        returnValue: _i6.Stream<S>.empty(),
        returnValueForMissingStub: _i6.Stream<S>.empty(),
      ) as _i6.Stream<S>);

  @override
  _i6.Stream<E> asyncMap<E>(
          _i6.FutureOr<E> Function(_i5.DatabaseEvent)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncMap,
          [convert],
        ),
        returnValue: _i6.Stream<E>.empty(),
        returnValueForMissingStub: _i6.Stream<E>.empty(),
      ) as _i6.Stream<E>);

  @override
  _i6.Stream<E> asyncExpand<E>(
          _i6.Stream<E>? Function(_i5.DatabaseEvent)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncExpand,
          [convert],
        ),
        returnValue: _i6.Stream<E>.empty(),
        returnValueForMissingStub: _i6.Stream<E>.empty(),
      ) as _i6.Stream<E>);

  @override
  _i6.Stream<_i5.DatabaseEvent> handleError(
    Function? onError, {
    bool Function(dynamic)? test,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleError,
          [onError],
          {#test: test},
        ),
        returnValue: _i6.Stream<_i5.DatabaseEvent>.empty(),
        returnValueForMissingStub: _i6.Stream<_i5.DatabaseEvent>.empty(),
      ) as _i6.Stream<_i5.DatabaseEvent>);

  @override
  _i6.Stream<S> expand<S>(Iterable<S> Function(_i5.DatabaseEvent)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #expand,
          [convert],
        ),
        returnValue: _i6.Stream<S>.empty(),
        returnValueForMissingStub: _i6.Stream<S>.empty(),
      ) as _i6.Stream<S>);

  @override
  _i6.Future<dynamic> pipe(
          _i6.StreamConsumer<_i5.DatabaseEvent>? streamConsumer) =>
      (super.noSuchMethod(
        Invocation.method(
          #pipe,
          [streamConsumer],
        ),
        returnValue: _i6.Future<dynamic>.value(),
        returnValueForMissingStub: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);

  @override
  _i6.Stream<S> transform<S>(
          _i6.StreamTransformer<_i5.DatabaseEvent, S>? streamTransformer) =>
      (super.noSuchMethod(
        Invocation.method(
          #transform,
          [streamTransformer],
        ),
        returnValue: _i6.Stream<S>.empty(),
        returnValueForMissingStub: _i6.Stream<S>.empty(),
      ) as _i6.Stream<S>);

  @override
  _i6.Future<_i5.DatabaseEvent> reduce(
          _i5.DatabaseEvent Function(
            _i5.DatabaseEvent,
            _i5.DatabaseEvent,
          )? combine) =>
      (super.noSuchMethod(
        Invocation.method(
          #reduce,
          [combine],
        ),
        returnValue: _i6.Future<_i5.DatabaseEvent>.value(_FakeDatabaseEvent_8(
          this,
          Invocation.method(
            #reduce,
            [combine],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i5.DatabaseEvent>.value(_FakeDatabaseEvent_8(
          this,
          Invocation.method(
            #reduce,
            [combine],
          ),
        )),
      ) as _i6.Future<_i5.DatabaseEvent>);

  @override
  _i6.Future<S> fold<S>(
    S? initialValue,
    S Function(
      S,
      _i5.DatabaseEvent,
    )? combine,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fold,
          [
            initialValue,
            combine,
          ],
        ),
        returnValue: _i7.ifNotNull(
              _i7.dummyValueOrNull<S>(
                this,
                Invocation.method(
                  #fold,
                  [
                    initialValue,
                    combine,
                  ],
                ),
              ),
              (S v) => _i6.Future<S>.value(v),
            ) ??
            _FakeFuture_11<S>(
              this,
              Invocation.method(
                #fold,
                [
                  initialValue,
                  combine,
                ],
              ),
            ),
        returnValueForMissingStub: _i7.ifNotNull(
              _i7.dummyValueOrNull<S>(
                this,
                Invocation.method(
                  #fold,
                  [
                    initialValue,
                    combine,
                  ],
                ),
              ),
              (S v) => _i6.Future<S>.value(v),
            ) ??
            _FakeFuture_11<S>(
              this,
              Invocation.method(
                #fold,
                [
                  initialValue,
                  combine,
                ],
              ),
            ),
      ) as _i6.Future<S>);

  @override
  _i6.Future<String> join([String? separator = r'']) => (super.noSuchMethod(
        Invocation.method(
          #join,
          [separator],
        ),
        returnValue: _i6.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #join,
            [separator],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #join,
            [separator],
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<bool> contains(Object? needle) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [needle],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<void> forEach(void Function(_i5.DatabaseEvent)? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #forEach,
          [action],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<bool> every(bool Function(_i5.DatabaseEvent)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #every,
          [test],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> any(bool Function(_i5.DatabaseEvent)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #any,
          [test],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Stream<R> cast<R>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _i6.Stream<R>.empty(),
        returnValueForMissingStub: _i6.Stream<R>.empty(),
      ) as _i6.Stream<R>);

  @override
  _i6.Future<List<_i5.DatabaseEvent>> toList() => (super.noSuchMethod(
        Invocation.method(
          #toList,
          [],
        ),
        returnValue:
            _i6.Future<List<_i5.DatabaseEvent>>.value(<_i5.DatabaseEvent>[]),
        returnValueForMissingStub:
            _i6.Future<List<_i5.DatabaseEvent>>.value(<_i5.DatabaseEvent>[]),
      ) as _i6.Future<List<_i5.DatabaseEvent>>);

  @override
  _i6.Future<Set<_i5.DatabaseEvent>> toSet() => (super.noSuchMethod(
        Invocation.method(
          #toSet,
          [],
        ),
        returnValue:
            _i6.Future<Set<_i5.DatabaseEvent>>.value(<_i5.DatabaseEvent>{}),
        returnValueForMissingStub:
            _i6.Future<Set<_i5.DatabaseEvent>>.value(<_i5.DatabaseEvent>{}),
      ) as _i6.Future<Set<_i5.DatabaseEvent>>);

  @override
  _i6.Future<E> drain<E>([E? futureValue]) => (super.noSuchMethod(
        Invocation.method(
          #drain,
          [futureValue],
        ),
        returnValue: _i7.ifNotNull(
              _i7.dummyValueOrNull<E>(
                this,
                Invocation.method(
                  #drain,
                  [futureValue],
                ),
              ),
              (E v) => _i6.Future<E>.value(v),
            ) ??
            _FakeFuture_11<E>(
              this,
              Invocation.method(
                #drain,
                [futureValue],
              ),
            ),
        returnValueForMissingStub: _i7.ifNotNull(
              _i7.dummyValueOrNull<E>(
                this,
                Invocation.method(
                  #drain,
                  [futureValue],
                ),
              ),
              (E v) => _i6.Future<E>.value(v),
            ) ??
            _FakeFuture_11<E>(
              this,
              Invocation.method(
                #drain,
                [futureValue],
              ),
            ),
      ) as _i6.Future<E>);

  @override
  _i6.Stream<_i5.DatabaseEvent> take(int? count) => (super.noSuchMethod(
        Invocation.method(
          #take,
          [count],
        ),
        returnValue: _i6.Stream<_i5.DatabaseEvent>.empty(),
        returnValueForMissingStub: _i6.Stream<_i5.DatabaseEvent>.empty(),
      ) as _i6.Stream<_i5.DatabaseEvent>);

  @override
  _i6.Stream<_i5.DatabaseEvent> takeWhile(
          bool Function(_i5.DatabaseEvent)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #takeWhile,
          [test],
        ),
        returnValue: _i6.Stream<_i5.DatabaseEvent>.empty(),
        returnValueForMissingStub: _i6.Stream<_i5.DatabaseEvent>.empty(),
      ) as _i6.Stream<_i5.DatabaseEvent>);

  @override
  _i6.Stream<_i5.DatabaseEvent> skip(int? count) => (super.noSuchMethod(
        Invocation.method(
          #skip,
          [count],
        ),
        returnValue: _i6.Stream<_i5.DatabaseEvent>.empty(),
        returnValueForMissingStub: _i6.Stream<_i5.DatabaseEvent>.empty(),
      ) as _i6.Stream<_i5.DatabaseEvent>);

  @override
  _i6.Stream<_i5.DatabaseEvent> skipWhile(
          bool Function(_i5.DatabaseEvent)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #skipWhile,
          [test],
        ),
        returnValue: _i6.Stream<_i5.DatabaseEvent>.empty(),
        returnValueForMissingStub: _i6.Stream<_i5.DatabaseEvent>.empty(),
      ) as _i6.Stream<_i5.DatabaseEvent>);

  @override
  _i6.Stream<_i5.DatabaseEvent> distinct(
          [bool Function(
            _i5.DatabaseEvent,
            _i5.DatabaseEvent,
          )? equals]) =>
      (super.noSuchMethod(
        Invocation.method(
          #distinct,
          [equals],
        ),
        returnValue: _i6.Stream<_i5.DatabaseEvent>.empty(),
        returnValueForMissingStub: _i6.Stream<_i5.DatabaseEvent>.empty(),
      ) as _i6.Stream<_i5.DatabaseEvent>);

  @override
  _i6.Future<_i5.DatabaseEvent> firstWhere(
    bool Function(_i5.DatabaseEvent)? test, {
    _i5.DatabaseEvent Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #firstWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i6.Future<_i5.DatabaseEvent>.value(_FakeDatabaseEvent_8(
          this,
          Invocation.method(
            #firstWhere,
            [test],
            {#orElse: orElse},
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i5.DatabaseEvent>.value(_FakeDatabaseEvent_8(
          this,
          Invocation.method(
            #firstWhere,
            [test],
            {#orElse: orElse},
          ),
        )),
      ) as _i6.Future<_i5.DatabaseEvent>);

  @override
  _i6.Future<_i5.DatabaseEvent> lastWhere(
    bool Function(_i5.DatabaseEvent)? test, {
    _i5.DatabaseEvent Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #lastWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i6.Future<_i5.DatabaseEvent>.value(_FakeDatabaseEvent_8(
          this,
          Invocation.method(
            #lastWhere,
            [test],
            {#orElse: orElse},
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i5.DatabaseEvent>.value(_FakeDatabaseEvent_8(
          this,
          Invocation.method(
            #lastWhere,
            [test],
            {#orElse: orElse},
          ),
        )),
      ) as _i6.Future<_i5.DatabaseEvent>);

  @override
  _i6.Future<_i5.DatabaseEvent> singleWhere(
    bool Function(_i5.DatabaseEvent)? test, {
    _i5.DatabaseEvent Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #singleWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i6.Future<_i5.DatabaseEvent>.value(_FakeDatabaseEvent_8(
          this,
          Invocation.method(
            #singleWhere,
            [test],
            {#orElse: orElse},
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i5.DatabaseEvent>.value(_FakeDatabaseEvent_8(
          this,
          Invocation.method(
            #singleWhere,
            [test],
            {#orElse: orElse},
          ),
        )),
      ) as _i6.Future<_i5.DatabaseEvent>);

  @override
  _i6.Future<_i5.DatabaseEvent> elementAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #elementAt,
          [index],
        ),
        returnValue: _i6.Future<_i5.DatabaseEvent>.value(_FakeDatabaseEvent_8(
          this,
          Invocation.method(
            #elementAt,
            [index],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i5.DatabaseEvent>.value(_FakeDatabaseEvent_8(
          this,
          Invocation.method(
            #elementAt,
            [index],
          ),
        )),
      ) as _i6.Future<_i5.DatabaseEvent>);

  @override
  _i6.Stream<_i5.DatabaseEvent> timeout(
    Duration? timeLimit, {
    void Function(_i6.EventSink<_i5.DatabaseEvent>)? onTimeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #timeout,
          [timeLimit],
          {#onTimeout: onTimeout},
        ),
        returnValue: _i6.Stream<_i5.DatabaseEvent>.empty(),
        returnValueForMissingStub: _i6.Stream<_i5.DatabaseEvent>.empty(),
      ) as _i6.Stream<_i5.DatabaseEvent>);
}

/// A class which mocks [FirebaseDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseDatabase extends _i1.Mock implements _i5.FirebaseDatabase {
  @override
  _i2.FirebaseApp get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeFirebaseApp_0(
          this,
          Invocation.getter(#app),
        ),
        returnValueForMissingStub: _FakeFirebaseApp_0(
          this,
          Invocation.getter(#app),
        ),
      ) as _i2.FirebaseApp);

  @override
  set app(_i2.FirebaseApp? _app) => super.noSuchMethod(
        Invocation.setter(
          #app,
          _app,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set databaseURL(String? _databaseURL) => super.noSuchMethod(
        Invocation.setter(
          #databaseURL,
          _databaseURL,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<dynamic, dynamic> get pluginConstants => (super.noSuchMethod(
        Invocation.getter(#pluginConstants),
        returnValue: <dynamic, dynamic>{},
        returnValueForMissingStub: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);

  @override
  void useDatabaseEmulator(
    String? host,
    int? port, {
    bool? automaticHostMapping = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #useDatabaseEmulator,
          [
            host,
            port,
          ],
          {#automaticHostMapping: automaticHostMapping},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.DatabaseReference reference() => (super.noSuchMethod(
        Invocation.method(
          #reference,
          [],
        ),
        returnValue: _FakeDatabaseReference_4(
          this,
          Invocation.method(
            #reference,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeDatabaseReference_4(
          this,
          Invocation.method(
            #reference,
            [],
          ),
        ),
      ) as _i5.DatabaseReference);

  @override
  _i5.DatabaseReference ref([String? path]) => (super.noSuchMethod(
        Invocation.method(
          #ref,
          [path],
        ),
        returnValue: _FakeDatabaseReference_4(
          this,
          Invocation.method(
            #ref,
            [path],
          ),
        ),
        returnValueForMissingStub: _FakeDatabaseReference_4(
          this,
          Invocation.method(
            #ref,
            [path],
          ),
        ),
      ) as _i5.DatabaseReference);

  @override
  _i5.DatabaseReference refFromURL(String? url) => (super.noSuchMethod(
        Invocation.method(
          #refFromURL,
          [url],
        ),
        returnValue: _FakeDatabaseReference_4(
          this,
          Invocation.method(
            #refFromURL,
            [url],
          ),
        ),
        returnValueForMissingStub: _FakeDatabaseReference_4(
          this,
          Invocation.method(
            #refFromURL,
            [url],
          ),
        ),
      ) as _i5.DatabaseReference);

  @override
  void setPersistenceEnabled(bool? enabled) => super.noSuchMethod(
        Invocation.method(
          #setPersistenceEnabled,
          [enabled],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setPersistenceCacheSizeBytes(int? cacheSize) => super.noSuchMethod(
        Invocation.method(
          #setPersistenceCacheSizeBytes,
          [cacheSize],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setLoggingEnabled(bool? enabled) => super.noSuchMethod(
        Invocation.method(
          #setLoggingEnabled,
          [enabled],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> goOnline() => (super.noSuchMethod(
        Invocation.method(
          #goOnline,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> goOffline() => (super.noSuchMethod(
        Invocation.method(
          #goOffline,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> purgeOutstandingWrites() => (super.noSuchMethod(
        Invocation.method(
          #purgeOutstandingWrites,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [DataSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataSnapshot extends _i1.Mock implements _i5.DataSnapshot {
  @override
  _i5.DatabaseReference get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeDatabaseReference_4(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub: _FakeDatabaseReference_4(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i5.DatabaseReference);

  @override
  bool get exists => (super.noSuchMethod(
        Invocation.getter(#exists),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  Iterable<_i5.DataSnapshot> get children => (super.noSuchMethod(
        Invocation.getter(#children),
        returnValue: <_i5.DataSnapshot>[],
        returnValueForMissingStub: <_i5.DataSnapshot>[],
      ) as Iterable<_i5.DataSnapshot>);

  @override
  bool hasChild(String? path) => (super.noSuchMethod(
        Invocation.method(
          #hasChild,
          [path],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i5.DataSnapshot child(String? path) => (super.noSuchMethod(
        Invocation.method(
          #child,
          [path],
        ),
        returnValue: _FakeDataSnapshot_7(
          this,
          Invocation.method(
            #child,
            [path],
          ),
        ),
        returnValueForMissingStub: _FakeDataSnapshot_7(
          this,
          Invocation.method(
            #child,
            [path],
          ),
        ),
      ) as _i5.DataSnapshot);
}
